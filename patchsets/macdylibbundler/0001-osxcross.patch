From 80d2e9f5741791d2f1cf93ef50d2fd8859587769 Mon Sep 17 00:00:00 2001
From: liushuyu <liushuyu011@gmail.com>
Date: Thu, 6 Dec 2018 17:30:55 -0700
Subject: [PATCH] osxcross

---
 CMakeLists.txt       | 34 ++++++++++++++++++++++++++++++++++
 src/Constants.h      | 20 ++++++++++++++++++++
 src/Dependency.cpp   | 16 ++++++++--------
 src/Dependency.h     |  8 +++++---
 src/DylibBundler.cpp | 38 +++++++++++++++++++-------------------
 src/DylibBundler.h   |  2 ++
 src/Utils.cpp        |  2 +-
 7 files changed, 89 insertions(+), 31 deletions(-)
 create mode 100644 CMakeLists.txt
 create mode 100644 src/Constants.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..e9d02be
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,34 @@
+cmake_minimum_required(VERSION 3.2)
+project(macdylibbundler)
+set (QT_MIN_VERSION "5.5.0")
+
+# taken from osxcross toolchain file
+macro(osxcross_getconf VAR)
+  if(NOT ${VAR})
+    set(${VAR} "$ENV{${VAR}}")
+    if(${VAR})
+      set(${VAR} "${${VAR}}" CACHE STRING "${VAR}")
+      message(STATUS "Found ${VAR}: ${${VAR}}")
+    else()
+      message(WARNING "Cannot determine \"${VAR}\"")
+    endif()
+  endif()
+endmacro()
+
+osxcross_getconf(OSXCROSS_HOST)
+
+if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
+  if(OSXCROSS_HOST)
+    add_definitions(-DOSXCROSS_HOST="${OSXCROSS_HOST}")
+  else()
+    message(FATAL_ERROR "This is intended to use with osxcross. If you have osxcross prepared, run eval `osxcross-conf`")
+  endif(OSXCROSS_HOST)
+endif()
+
+add_executable(macdylibbundler
+  ./src/Dependency.cpp
+  ./src/DylibBundler.cpp
+  ./src/Settings.cpp
+  ./src/Utils.cpp
+  ./src/main.cpp
+)
diff --git a/src/Constants.h b/src/Constants.h
new file mode 100644
index 0000000..f5c2d0d
--- /dev/null
+++ b/src/Constants.h
@@ -0,0 +1,20 @@
+#include <string>
+
+#ifndef DYLIBBUNDLER_CONST
+#define DYLIBBUNDLER_CONST
+
+const std::string install_name_tool =
+#ifndef OSXCROSS_HOST
+"install_name_tool";
+#else
+OSXCROSS_HOST "-install_name_tool";
+#endif
+
+const std::string otool =
+#ifndef OSXCROSS_HOST
+"otool";
+#else
+OSXCROSS_HOST "-otool";
+#endif
+
+#endif
diff --git a/src/Dependency.cpp b/src/Dependency.cpp
index 66249bd..e2fe667 100644
--- a/src/Dependency.cpp
+++ b/src/Dependency.cpp
@@ -118,14 +118,14 @@ Dependency::Dependency(std::string path)
         filename = stripPrefix(path);
         prefix = path.substr(0, path.rfind("/")+1);
     }
-    
+
     //check if the lib is in a known location
     if( !prefix.empty() && prefix[ prefix.size()-1 ] != '/' ) prefix += "/";
     if( prefix.empty() || !fileExists( prefix+filename ) )
     {
         //the paths contains at least /usr/lib so if it is empty we have not initialized it
         if( paths.empty() ) initSearchPaths();
-        
+
         //check if file is contained in one of the paths
         for( size_t i=0; i<paths.size(); ++i)
         {
@@ -138,17 +138,17 @@ Dependency::Dependency(std::string path)
             }
         }
     }
-    
+
     //If the location is still unknown, ask the user for search path
     if( !Settings::isPrefixIgnored(prefix)
         && ( prefix.empty() || !fileExists( prefix+filename ) ) )
     {
         std::cerr << "\n/!\\ WARNING : Library " << filename << " has an incomplete name (location unknown)" << std::endl;
         missing_prefixes = true;
-        
+
         paths.push_back(getUserInputDirForFile(filename));
     }
-    
+
     //new_name  = filename.substr(0, filename.find(".")) + ".dylib";
     new_name = filename;
 }
@@ -157,7 +157,7 @@ void Dependency::print()
 {
     std::cout << std::endl;
     std::cout << " * " << filename.c_str() << " from " << prefix.c_str() << std::endl;
-    
+
     const int symamount = symlinks.size();
     for(int n=0; n<symamount; n++)
         std::cout << "     symlink --> " << symlinks[n].c_str() << std::endl;;
@@ -197,9 +197,9 @@ bool Dependency::mergeIfSameAs(Dependency& dep2)
 void Dependency::copyYourself()
 {
     copyFile(getOriginalPath(), getInstallPath());
-    
+
     // Fix the lib's inner name
-    std::string command = std::string("install_name_tool -id \"") + getInnerPath() + "\" \"" + getInstallPath() + "\"";
+    std::string command = install_name_tool + std::string(" -id \"") + getInnerPath() + "\" \"" + getInstallPath() + "\"";
     if( systemp( command ) != 0 )
     {
         std::cerr << "\n\nError : An error occured while trying to change identity of library " << getInstallPath() << std::endl;
diff --git a/src/Dependency.h b/src/Dependency.h
index c3c4e0c..d4bceb2 100644
--- a/src/Dependency.h
+++ b/src/Dependency.h
@@ -29,13 +29,15 @@ THE SOFTWARE.
 #include <string>
 #include <vector>
 
+#include "Constants.h"
+
 class Dependency
 {
     // origin
     std::string filename;
     std::string prefix;
     std::vector<std::string> symlinks;
-    
+
     // installation
     std::string new_name;
 public:
@@ -47,7 +49,7 @@ public:
     std::string getOriginalPath() const{ return prefix+filename; }
     std::string getInstallPath();
     std::string getInnerPath();
-        
+
     void addSymlink(std::string s);
     int getSymlinkAmount() const{ return symlinks.size(); }
 
@@ -63,4 +65,4 @@ public:
 };
 
 
-#endif
\ No newline at end of file
+#endif
diff --git a/src/DylibBundler.cpp b/src/DylibBundler.cpp
index bb811dc..e65e905 100644
--- a/src/DylibBundler.cpp
+++ b/src/DylibBundler.cpp
@@ -71,7 +71,7 @@ void collectRpaths(const std::string& filename)
         return;
     }
 
-    std::string cmd = "otool -l " + filename;
+    std::string cmd = otool + " -l " + filename;
     std::string output = system_get_output(cmd);
 
     std::vector<std::string> lc_lines;
@@ -156,7 +156,7 @@ void fixRpathsOnFile(const std::string& original_file, const std::string& file_t
 
     for (size_t i=0; i < rpaths_to_fix.size(); ++i)
     {
-        std::string command = std::string("install_name_tool -rpath \"") +
+        std::string command = install_name_tool + std::string(" -rpath \"") +
                 rpaths_to_fix[i] + "\" \"" + Settings::inside_lib_path() + "\" \"" + file_to_fix + "\"";
         if ( systemp(command) != 0)
         {
@@ -169,7 +169,7 @@ void fixRpathsOnFile(const std::string& original_file, const std::string& file_t
 void addDependency(std::string path, std::string filename)
 {
     Dependency dep(path);
-    
+
     // we need to check if this library was already added to avoid duplicates
     bool in_deps = false;
     const int dep_amount = deps.size();
@@ -198,8 +198,8 @@ void addDependency(std::string path, std::string filename)
  */
 void collectDependencies(std::string filename, std::vector<std::string>& lines)
 {
-    // execute "otool -l" on the given file and collect the command's output
-    std::string cmd = "otool -l \"" + filename + "\"";
+    // execute "otool -L" on the given file and collect the command's output
+    std::string cmd = otool + " -l \"" + filename + "\"";
     std::string output = system_get_output(cmd);
 
     if(output.find("can't open file")!=std::string::npos or output.find("No such file")!=std::string::npos or output.size()<1)
@@ -207,7 +207,7 @@ void collectDependencies(std::string filename, std::vector<std::string>& lines)
         std::cerr << "Cannot find file " << filename << " to read its dependencies" << std::endl;
         exit(1);
     }
-    
+
     // split output
     std::vector<std::string> raw_lines;
     tokenize(output, "\n", &raw_lines);
@@ -240,9 +240,9 @@ void collectDependencies(std::string filename)
 {
     std::vector<std::string> lines;
     collectDependencies(filename, lines);
-       
+
     std::cout << "."; fflush(stdout);
-    
+
     const int line_amount = lines.size();
     for(int n=0; n<line_amount; n++)
     {
@@ -265,7 +265,7 @@ void collectSubDependencies()
 {
     // print status to user
     int dep_amount = deps.size();
-    
+
     // recursively collect each dependencie's dependencies
     while(true)
     {
@@ -281,7 +281,7 @@ void collectSubDependencies()
             }
             collectRpathsForFilename(original_path);
             collectDependencies(original_path, lines);
-            
+
             const int line_amount = lines.size();
             for(int n=0; n<line_amount; n++)
             {
@@ -298,7 +298,7 @@ void collectSubDependencies()
                 addDependency(dep_path, original_path);
             }//next
         }//next
-        
+
         if(deps.size() == dep_amount) break; // no more dependencies were added on this iteration, stop searching
     }
 }
@@ -307,10 +307,10 @@ void createDestDir()
 {
     std::string dest_folder = Settings::destFolder();
     std::cout << "* Checking output directory " << dest_folder.c_str() << std::endl;
-    
+
     // ----------- check dest folder stuff ----------
     bool dest_exists = fileExists(dest_folder);
-    
+
     if(dest_exists and Settings::canOverwriteDir())
     {
         std::cout << "* Erasing old output directory " << dest_folder.c_str() << std::endl;
@@ -322,10 +322,10 @@ void createDestDir()
         }
         dest_exists = false;
     }
-    
+
     if(!dest_exists)
     {
-        
+
         if(Settings::canCreateDir())
         {
             std::cout << "* Creating output directory " << dest_folder.c_str() << std::endl;
@@ -342,7 +342,7 @@ void createDestDir()
             exit(1);
         }
     }
-    
+
 }
 
 void doneWithDeps_go()
@@ -355,12 +355,12 @@ void doneWithDeps_go()
         deps[n].print();
     }
     std::cout << std::endl;
-    
+
     // copy files if requested by user
     if(Settings::bundleLibs())
     {
         createDestDir();
-        
+
         for(int n=0; n<dep_amount; n++)
         {
             deps[n].copyYourself();
@@ -368,7 +368,7 @@ void doneWithDeps_go()
             fixRpathsOnFile(deps[n].getOriginalPath(), deps[n].getInstallPath());
         }
     }
-    
+
     const int fileToFixAmount = Settings::fileToFixAmount();
     for(int n=0; n<fileToFixAmount; n++)
     {
diff --git a/src/DylibBundler.h b/src/DylibBundler.h
index edf557b..d779f90 100644
--- a/src/DylibBundler.h
+++ b/src/DylibBundler.h
@@ -27,6 +27,8 @@ THE SOFTWARE.
 
 #include <string>
 
+#include "Constants.h"
+
 void collectDependencies(std::string filename);
 void collectSubDependencies();
 void doneWithDeps_go();
diff --git a/src/Utils.cpp b/src/Utils.cpp
index 8651c5f..5892e67 100644
--- a/src/Utils.cpp
+++ b/src/Utils.cpp
@@ -169,7 +169,7 @@ int systemp(std::string& cmd)
 
 void changeInstallName(const std::string& binary_file, const std::string& old_name, const std::string& new_name)
 {
-    std::string command = std::string("install_name_tool -change \"") + old_name + "\" \"" + new_name + "\" \"" + binary_file + "\"";
+    std::string command = install_name_tool + std::string(" -change \"") + old_name + "\" \"" + new_name + "\" \"" + binary_file + "\"";
     if( systemp( command ) != 0 )
     {
         std::cerr << "\n\nError: An error occured while trying to fix dependencies of " << binary_file << std::endl;
-- 
2.27.0

